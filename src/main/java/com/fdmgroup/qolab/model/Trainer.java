package com.fdmgroup.qolab.model;

import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.springframework.data.annotation.Transient;
import org.springframework.stereotype.Component;

import com.google.gson.annotations.Expose;

/**
 * Trainer POJO. Contains trainer id, first name, last name,
 * trainer username, trainer password, rooms trainer is part of, 
 * and challenges made by the trainer.
 * 
 * @since 2020-10-23
 */
@Component
@Entity
@Table(uniqueConstraints = {@UniqueConstraint(columnNames = {"username"})})
public class Trainer implements Cloneable {

	/**
	 * Unique trainer id generated by the sequence. 
	 */
	@Id
	@SequenceGenerator(name = "	trainerSeq", sequenceName = "SEQ_TRAINER", initialValue = 1, allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "trainerSeq")
	@Column(name = "TRAINER_ID")
	private int trainerId;
	
	/** 
	 * The first name of the trainer. 
	 */
	@Column(name = "TRAINER_FIRST_NAME")
	private String firstName;
	
	/**
	 * The last name of the trainer. 
	 */
	@Column(name = "TRAINER_LAST_NAME")
	private String lastName;
	
	/**
	 * The username of the trainer. 
	 */
	@Column(name = "USERNAME")
	private String username;

	/**
	 * The password of the trainer. 
	 */
	@Column(name = "PASSWORD")
	private String password;

	/**
	 * The list of rooms trainer is running. 
	 */
	@OneToMany(mappedBy = "trainer", fetch = FetchType.EAGER)
	private List<Room> rooms;
	
	/**
	 * The list of challenges made by the trainer. 
	 */
	@OneToMany(mappedBy = "trainer")
	private List<Challenge> challenges;

	/**
	 * Default constructor. 
	 */
	public Trainer() {	}

	/**
	 * Constructor. 
	 * 
	 * @param firstName
	 * @param lastName
	 * @param username
	 * @param password
	 * 
	 * @return Returns the trainer object with attributes passed from the param. 
	 */
	public Trainer(String firstName, String lastName, String username, String password) {
		super();
		this.firstName = firstName;
		this.lastName = lastName;
		this.username = username;
		this.password = password;
	}

	public List<Challenge> getChallenges() {
		return challenges;
	}

	public void setChallenges(List<Challenge> challenges) {
		this.challenges = challenges;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public int getTrainerId() {
		return trainerId;
	}

	public void setTrainerId(int trainerId) {
		this.trainerId = trainerId;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public List<Room> getRooms() {
		return rooms;
	}

	public void setRooms(List<Room> rooms) {
		this.rooms = rooms;
	}
	
	/**
	 * A method to clone the trainer object. 
	 * 
	 * @return Trainer object that is a exact clone of this trainee object. 
	 * @throws CloneNotSupportedException
	 * 
	 */
	public Object clone() throws CloneNotSupportedException {
		Trainer t = (Trainer) super.clone();
		return t;
	}

}
